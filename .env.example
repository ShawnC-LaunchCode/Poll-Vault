# =============================================================================
# POLL VAULT - ENVIRONMENT CONFIGURATION
# =============================================================================
# Copy this file to .env and update the values for your environment
# 
# SECURITY WARNING: Never commit your actual .env file to version control!
# Add .env to your .gitignore file if not already present.
# =============================================================================

# =============================================================================
# CORE APPLICATION SETTINGS
# =============================================================================

# Environment (development, production, test)
# Affects cookie security, error reporting, and other environment-specific behaviors
NODE_ENV=development

# Server Port
# Most hosting platforms (Heroku, Railway, etc.) set this automatically
# Default is 5000 for local development - CRITICAL for external hosting
PORT=5000

# Base URL for your application
# This is used for generating links in emails and API responses
# Examples:
#   Development: http://localhost:5000
#   Production: https://your-domain.com
BASE_URL=http://localhost:5000

# Frontend Base URL (must be prefixed with VITE_ for Vite access)
# Should match BASE_URL unless you have separate frontend/backend domains
VITE_BASE_URL=http://localhost:5000

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL Database Connection String
# Format: postgresql://username:password@host:port/database_name
# 
# Local PostgreSQL example:
# DATABASE_URL=postgresql://username:password@localhost:5432/poll_vault
#
# Hosted PostgreSQL (Neon, Supabase, etc.) example:
# DATABASE_URL=postgresql://username:password@ep-example-123456.us-east-1.aws.neon.tech/neondb
DATABASE_URL=postgresql://username:password@localhost:5432/poll_vault

# =============================================================================
# GOOGLE OAUTH2 AUTHENTICATION
# =============================================================================

# Google OAuth2 Client ID (Server-side)
# Get this from Google Cloud Console > APIs & Services > Credentials
# Used for server-side ID token verification
GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com

# Google OAuth2 Client ID (Client-side)
# Must be prefixed with VITE_ for frontend access
# Usually the same as GOOGLE_CLIENT_ID unless using different credentials
VITE_GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com

# IMPORTANT: Google OAuth2 Client Secret is NOT required for this application
# This application uses Google's ID token flow which only requires the Client ID
# Client Secret is only needed for server-side authorization code flows

# =============================================================================
# SESSION & SECURITY
# =============================================================================

# Session Secret
# Use a strong, randomly generated secret for production
# Generate with: openssl rand -base64 32
SESSION_SECRET=your-super-secret-session-key-change-this-in-production

# Allowed Origins for CSRF Protection
# Comma-separated list of allowed HOSTNAMES (NO protocols or paths) for authentication requests
# SECURITY WARNING: Only use specific domains you control - NEVER use public suffixes!
# Examples:
#   Development: localhost,127.0.0.1
#   Production: yourdomain.com,www.yourdomain.com
#   BAD EXAMPLES: herokuapp.com, vercel.app, netlify.app (these are public suffixes)
# Format: hostname1,hostname2 (no https://, no paths, no ports)
ALLOWED_ORIGIN=localhost,127.0.0.1

# =============================================================================
# EMAIL CONFIGURATION (SendGrid)
# =============================================================================

# SendGrid API Key
# Get this from SendGrid Dashboard > Settings > API Keys
# Required for sending survey invitations and notifications
SENDGRID_API_KEY=SG.your-sendgrid-api-key

# From Email Address
# Must be a verified sender in your SendGrid account
# This will be the "from" address for all survey emails
SENDGRID_FROM_EMAIL=noreply@your-domain.com

# =============================================================================
# OPTIONAL CONFIGURATION
# =============================================================================

# Database Pool Configuration (Optional)
# Uncomment and adjust if you need custom database connection pooling
# DATABASE_POOL_MIN=2
# DATABASE_POOL_MAX=10

# Email Template Configuration (Optional)
# Custom email templates for survey invitations
# EMAIL_TEMPLATE_SURVEY_INVITATION=custom-template-id

# File Upload Configuration (Optional)
# Maximum file size for survey file uploads (in bytes)
# For external hosting, consider using cloud storage (AWS S3, Cloudinary, etc.)
MAX_FILE_SIZE=10485760  # 10MB default, adjust as needed

# Upload Directory for File Storage
# For external hosting, consider using absolute paths or cloud storage
# Examples:
#   Local/Docker: /app/uploads or ./uploads
#   Cloud: Leave empty to use cloud storage service
UPLOAD_DIR=./uploads

# Rate Limiting Configuration (Optional)
# API rate limiting settings
# RATE_LIMIT_WINDOW=900000    # 15 minutes in milliseconds
# RATE_LIMIT_MAX=100          # Maximum requests per window

# =============================================================================
# HOSTING PLATFORM SPECIFIC NOTES
# =============================================================================

# VERCEL:
# - Set environment variables in Vercel Dashboard > Project > Settings > Environment Variables
# - Use VERCEL_URL for dynamic BASE_URL: BASE_URL=https://$VERCEL_URL
# - Vercel automatically provides NODE_ENV=production in production

# NETLIFY:
# - Set environment variables in Netlify Dashboard > Site Settings > Environment Variables
# - Use DEPLOY_PRIME_URL for dynamic BASE_URL: BASE_URL=$DEPLOY_PRIME_URL
# - Consider using Netlify Functions for serverless deployment

# RAILWAY:
# - Set environment variables in Railway Dashboard > Project > Variables
# - Railway provides $PORT and $RAILWAY_STATIC_URL variables
# - Use Railway's PostgreSQL addon for managed database
# - CRITICAL: Application MUST listen on process.env.PORT for Railway deployment

# HEROKU:
# - Set environment variables using: heroku config:set VARIABLE_NAME=value
# - Use Heroku Postgres addon for managed database
# - Heroku automatically sets PORT and NODE_ENV
# - CRITICAL: Application MUST listen on process.env.PORT for Heroku deployment

# DOCKER/KUBERNETES:
# - Pass environment variables using docker run -e or kubernetes configmaps
# - Consider using secrets management for sensitive values
# - Ensure proper health checks and logging configuration

# =============================================================================
# DEVELOPMENT VS PRODUCTION DIFFERENCES
# =============================================================================

# DEVELOPMENT:
# - Use http:// for BASE_URL and VITE_BASE_URL
# - Set NODE_ENV=development
# - Use local PostgreSQL or development database
# - Set secure=false for cookies (handled automatically)
# - Use localhost in ALLOWED_ORIGIN

# PRODUCTION:
# - Use https:// for BASE_URL and VITE_BASE_URL
# - Set NODE_ENV=production
# - Use production PostgreSQL with SSL
# - Cookies will be secure (handled automatically)
# - Use your actual domain in ALLOWED_ORIGIN
# - Use strong, unique SESSION_SECRET
# - Enable proper logging and monitoring

# =============================================================================
# SECURITY BEST PRACTICES
# =============================================================================

# 1. Never commit .env files to version control
# 2. Use different credentials for development and production
# 3. Regularly rotate API keys and secrets
# 4. Use environment-specific Google OAuth2 credentials
# 5. Set up proper CORS and CSP headers
# 6. Use HTTPS in production
# 7. Monitor for suspicious authentication attempts
# 8. Keep dependencies updated for security patches

# =============================================================================
# GOOGLE OAUTH2 SETUP INSTRUCTIONS (2025)
# =============================================================================

# 1. Go to Google Cloud Console (https://console.cloud.google.com/)
# 2. Create a new project or select existing project
# 3. Enable Google Identity Services:
#    - Go to APIs & Services > Library  
#    - Search for "Google Identity Services" or use the Google Sign-In integration
#    - No specific API enablement required for modern OAuth2 flows
# 4. Create OAuth2 Web Client credentials:
#    - Go to APIs & Services > Credentials
#    - Click "Create Credentials" > "OAuth 2.0 Client IDs"
#    - Choose "Web application" as application type
#    - Configure "Authorized JavaScript origins" (CRITICAL):
#      * Development: http://localhost:5000
#      * Production: https://yourdomain.com (use your actual domain)
#    - Leave "Authorized redirect URIs" empty (not needed for ID token flow)
# 5. Copy the Client ID to both GOOGLE_CLIENT_ID and VITE_GOOGLE_CLIENT_ID
# 6. Do NOT copy the Client Secret - it's not needed for this implementation
# 7. Test with a simple sign-in to verify the setup works

# =============================================================================
# TROUBLESHOOTING
# =============================================================================

# Common Issues:
# 1. "GOOGLE_CLIENT_ID not provided" - Check server-side GOOGLE_CLIENT_ID
# 2. "VITE_GOOGLE_CLIENT_ID not set" - Check client-side environment variable
# 3. Database connection issues - Verify DATABASE_URL format and credentials
# 4. CORS errors - Check ALLOWED_ORIGIN matches your domain
# 5. Session issues - Verify SESSION_SECRET is set and consistent
# 6. Email not sending - Check SendGrid API key and from email verification

# For more detailed setup instructions, see the documentation in replit.md